{{- if .Values.runDirectlyAfterInstall }}
runDirectlyAfterInstall is true so running a mysqldump job now...
{{- end }}

Running mysqldump on crontab schedule "{{ .Values.schedule }}"

For job status do:
$ kubectl get job {{ template "mysqldump.fullname" . }} -o wide
$ kubectl get pods -l app.kubernetes.io/name=mysqldump  -o wide

For cronjob status do:
$ kubectl get cronjob -l app.kubernetes.io/name=mysqldump -o yaml
$ kubectl get jobs --selector=cronjob-name={{ template "mysqldump.fullname" . }}

To see the logs from the most recent backup job do:
$ kubectl logs -f -l job-name=mysqldump

To run a job immediately do:
$ kubectl create job run-now --from=cronjob/{{ template "mysqldump.fullname" . }}

The mysqldump contents can be found in:
{{- if .Values.persistentVolumeClaim }}
$ kubectl get persistentvolumeclaim {{ .Values.persistentVolumeClaim }}
{{ else if .Values.persistence.enabled }}
$ kubectl get persistentvolumeclaim {{ template "mysqldump.fullname" . }}
{{ else }}
Empty dir mount of the container...
{{- end }}
